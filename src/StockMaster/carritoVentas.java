/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package StockMaster;

import conexionesSQL.conexionSQL;
import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Aleja
 */
public class carritoVentas extends javax.swing.JFrame {

    conexionSQL cc = new conexionSQL();
    Connection con = cc.conexion();
    login datosUsuario = new login();

    float totalVenta = 0;

    /**
     * Creates new form carritoVentas
     */
    public carritoVentas() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel3 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaArticulos = new javax.swing.JTable();
        txtFecha = new javax.swing.JLabel();
        txtNombre = new javax.swing.JLabel();
        btnRealizar = new javax.swing.JButton();
        btnCancelar = new javax.swing.JButton();
        txtTotal = new javax.swing.JLabel();

        jLabel3.setText("jLabel3");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        tablaArticulos.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        jScrollPane1.setViewportView(tablaArticulos);

        txtFecha.setText("Fecha: 2022-06-07");

        txtNombre.setText("Nombre del vendedor");

        btnRealizar.setText("Realizar venta");
        btnRealizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRealizarActionPerformed(evt);
            }
        });

        btnCancelar.setText("Cancelar venta");
        btnCancelar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelarActionPerformed(evt);
            }
        });

        txtTotal.setText("Total: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnCancelar)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtTotal)
                                    .addComponent(btnRealizar))))
                        .addGap(0, 5, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(txtNombre)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtFecha, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFecha)
                    .addComponent(txtNombre))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 207, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addComponent(txtTotal)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRealizar)
                    .addComponent(btnCancelar))
                .addGap(20, 20, 20))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        mostrarDatos();
        Obtenerfecha();
        txtNombre.setText("Vendedor: " + datosUsuario.getNombreUsuario() + " " + datosUsuario.getApellidosUsuario());

    }//GEN-LAST:event_formWindowOpened

    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        int result = JOptionPane.showConfirmDialog(null, " ¿Está seguro que desea vaciar el carrito? ", "",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            vaciarTabla();
            JOptionPane.showMessageDialog(null, "Carrito eliminado");
            this.dispose();
        }
    }//GEN-LAST:event_btnCancelarActionPerformed

    private void btnRealizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRealizarActionPerformed
        int result = JOptionPane.showConfirmDialog(null, " Confirmar venta ", "",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.QUESTION_MESSAGE);
        if (result == JOptionPane.YES_OPTION) {
            insertarVenta();
            //vaciarTabla();
            JOptionPane.showMessageDialog(null, "Venta realizada");
            this.dispose();
        }
    }//GEN-LAST:event_btnRealizarActionPerformed

    public void Obtenerfecha() {
        long miliseconds = System.currentTimeMillis();
        Date date = new Date(miliseconds);
        txtFecha.setText("Fecha: " + date);

    }

    public void vaciarTabla() {

        try {
            String SQL = "TRUNCATE articulo_lista ";
            PreparedStatement pst = con.prepareStatement(SQL);

            pst.execute();
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error, no se realizaron cambios. ");
            System.out.println("Error" + e);
        }
    }

    public void mostrarDatos() {

        String[] titulos = {"ID Articulo", "Cantidad", "Precio Unitario", "Tipo de venta", "Total"};
        String[] registros = new String[5];

        DefaultTableModel modelo = new DefaultTableModel(null, titulos);

        String SQL = "select * from articulo_lista";

        try {
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(SQL);

            while (rs.next()) {

                registros[0] = rs.getString("idarticuloLista");
                registros[1] = rs.getString("cantidad");
                registros[2] = rs.getString("precio");
                registros[3] = rs.getString("tipoVenta");
                Float totalPorArticulos = Float.parseFloat(rs.getString("precio")) * Integer.parseInt(rs.getString("cantidad"));
                registros[4] = Float.toString(totalPorArticulos);
                modelo.addRow(registros);
                totalVenta = totalVenta + totalPorArticulos;
                txtTotal.setText("Total: $ " + totalVenta);

            }

            tablaArticulos.setModel(modelo);
            tablaArticulos.setDefaultEditor(Object.class, null);

        } catch (Exception e) {
            System.out.println("Error" + e);

        }

    }

    public void insertarVenta() {
        long miliseconds = System.currentTimeMillis();
        Date date = new Date(miliseconds);
        try {
            String SQL = "INSERT into venta (fecha,total,user_iduser) values (?,?,?)";
            PreparedStatement pst = con.prepareStatement(SQL);

            pst.setDate(1, date);
            pst.setFloat(2, totalVenta);
            pst.setString(3, datosUsuario.getIDUsuario());

            pst.execute();
            insertarVenta_has_Item();
            this.dispose();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error, no se realizaron cambios. Favor de verificar los datos");
            System.out.println("Error" + e);
        }

    }

    public void insertarVenta_has_Item() {

        try {
            String ultimaIDVenta = ultimaVenta();

            String SQL2 = "INSERT into venta_has_item (venta_idventa,item_iditem,cantidad,totalArticulos) values (?,?,?,?)";
            PreparedStatement pst2 = con.prepareStatement(SQL2);

            String SQL = "select * from articulo_lista";

            try {
                Statement st2 = con.createStatement();
                ResultSet rs2 = st2.executeQuery(SQL);

                while (rs2.next()) {
                    pst2.setInt(1, Integer.parseInt(ultimaIDVenta));
                    pst2.setInt(2, Integer.parseInt(rs2.getString("idarticuloLista")));
                    pst2.setInt(3, Integer.parseInt(rs2.getString("cantidad")));
                    Float totalPorArticulos = Float.parseFloat(rs2.getString("precio")) * Integer.parseInt(rs2.getString("cantidad"));
                    pst2.setFloat(4, totalPorArticulos);
                    pst2.execute();
                    actualizarStock(rs2.getString("idarticuloLista"), Integer.parseInt(rs2.getString("cantidad")));
                }

            } catch (Exception e) {
                System.out.println("Error" + e);

            }
            vaciarTabla();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error, no se realizaron cambios. Favor de verificar los datos");
            System.out.println("Error" + e);
        }

    }

    public void actualizarStock(String idItem, int cantidadNueva) {

        try {
            String SQL = "update item set stock=? where iditem=?";
            PreparedStatement pst = con.prepareStatement(SQL);

            String SQL2 = "select * from item where iditem = '" + idItem + "'";
            try {
                Statement st = con.createStatement();
                ResultSet rs = st.executeQuery(SQL2);

                while (rs.next()) {
                    cantidadNueva = Integer.parseInt(rs.getString("stock")) - cantidadNueva;
                }

            } catch (Exception e) {
                System.out.println("Error" + e);

            }

            pst.setInt(1, cantidadNueva);
            pst.setString(2, idItem);

            pst.execute();
            JOptionPane.showMessageDialog(null, "Cambios guardados correctamente");

        } catch (Exception e) {
            System.out.println("Error" + e);
        }

    }

    public String ultimaVenta() {
        String idUltimaVenta = null;
        String SQL = "SELECT * FROM venta ORDER BY idventa DESC LIMIT 1";
        try {
            Statement st = con.createStatement();
            ResultSet rs = st.executeQuery(SQL);

            while (rs.next()) {

                idUltimaVenta = rs.getString("idventa");

            }

        } catch (Exception e) {
            System.out.println("Error encontrado" + e);

        }

        return idUltimaVenta;
    }

    /**
     * @param args the command line arguments
     */
    public static void carritoVentas() {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(carritoVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(carritoVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(carritoVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(carritoVentas.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new carritoVentas().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnRealizar;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tablaArticulos;
    private javax.swing.JLabel txtFecha;
    private javax.swing.JLabel txtNombre;
    private javax.swing.JLabel txtTotal;
    // End of variables declaration//GEN-END:variables
}
